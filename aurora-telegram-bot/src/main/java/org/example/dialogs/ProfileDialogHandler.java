package org.example.dialogs;

import org.example.AuroraBot;
import org.example.interfaces.DialogHandler;
import org.example.models.UserInfo;
import org.example.services.UserInfoService;

import java.util.logging.Logger;

public class ProfileDialogHandler implements DialogHandler {
    private static final Logger logger = Logger.getLogger(ProfileDialogHandler.class.getName());

    private static final int MAX_INPUT_LENGTH = 255;

    private final AuroraBot bot;
    private final UserInfoService userInfoService;

    public ProfileDialogHandler(AuroraBot bot, UserInfoService userInfoService) {
        this.bot = bot;
        this.userInfoService = userInfoService;
    }

    @Override
    public void handle(Long userId, String message) {
        if (message.length() > MAX_INPUT_LENGTH) {
            bot.sendTextMessage(userId, "–í–∞—à –≤–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.");
            return;
        }

        UserInfo userInfo = bot.getUserInfos().get(userId);
        int questionCount = bot.getUserQuestionCounts().getOrDefault(userId, 1);

        switch (questionCount) {
            case 1 -> handleNameInput(userId, userInfo, message);
            case 2 -> handleAgeInput(userId, userInfo, message);
            case 3 -> handleDiscussionTopicInput(userId, userInfo, message);
            case 4 -> handleFunFactInput(userId, userInfo, message);
            default -> bot.sendTextMessage(userId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø –∞–Ω–∫–µ—Ç—ã.");
        }
    }

    private void handleNameInput(Long userId, UserInfo userInfo, String message) {
        userInfo.setName(message);
        bot.getUserQuestionCounts().put(userId, 2);
        bot.sendTextMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.");
    }

    private void handleAgeInput(Long userId, UserInfo userInfo, String message) {
        userInfo.setAge(message);
        bot.getUserQuestionCounts().put(userId, 3);
        bot.sendTextMessage(userId, "üëÄ –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ–±—Å—É–¥–∏—Ç—å?");
    }

    private void handleDiscussionTopicInput(Long userId, UserInfo userInfo, String message) {
        userInfo.setDiscussionTopic(message);
        bot.getUserQuestionCounts().put(userId, 4);
        bot.sendTextMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º –æ —Å–µ–±–µ.");
    }

    private void handleFunFactInput(Long userId, UserInfo userInfo, String message) {
        userInfo.setFunFact(message);
        try {
            userInfoService.saveUserInfo(userInfo);
            sendUserProfile(userId, userInfo);
            bot.getUserModes().remove(userId);
            logger.info("Profile saved for userId: " + userId);
        } catch (Exception e) {
            bot.sendTextMessage(userId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            logger.severe("Error saving profile for userId: " + userId + " - " + e.getMessage());
        }
    }

    private void sendUserProfile(Long userId, UserInfo userInfo) {
        String photoUrl = bot.getUserPhotoUrl(userId);
        String profileMessage = buildProfileMessage(userId, userInfo);

        if (photoUrl != null) {
            bot.sendPhotoMessage(userId, photoUrl, true);
        }
        bot.sendTextButtonsMessage(userId, profileMessage, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "accepted", "–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏", "toggle_visibility");
    }

    private String buildProfileMessage(Long userId, UserInfo userInfo) {
        String userAlias = bot.getUserAlias(userId);
        String contactInfo = (userAlias != null && !userAlias.equals("@null"))
                ? userAlias
                : String.format("<a href=\"tg://user?id=%d\">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>", userId);

        String visibilityStatus = userInfo.getIsVisible()
                ? "\n‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤–∏–¥–Ω–∞."
                : "\n‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç.";

        return String.format(
                "–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–∏—à–ª—ë–º –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É:\n‚è¨\n%s%s",
                userInfoService.formatUserProfile(userInfo, contactInfo),
                visibilityStatus
        );
    }
}
