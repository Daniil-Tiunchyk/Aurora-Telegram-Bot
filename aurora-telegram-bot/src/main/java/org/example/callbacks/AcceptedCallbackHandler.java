package org.example.callbacks;

import org.example.AuroraBot;
import org.example.MultiSessionTelegramBot;
import org.example.enums.DialogMode;
import org.example.interfaces.CallbackQueryHandler;
import org.example.models.UserInfo;
import org.example.services.UserInfoService;

import java.util.logging.Logger;

public class AcceptedCallbackHandler implements CallbackQueryHandler {
    private final AuroraBot bot;
    private final UserInfoService userInfoService;
    private static final Logger logger = Logger.getLogger(AcceptedCallbackHandler.class.getName());

    public AcceptedCallbackHandler(AuroraBot bot, UserInfoService userInfoService) {
        this.bot = bot;
        this.userInfoService = userInfoService;
    }

    @Override
    public void handle(Long userId, Integer messageId) {
        String updatedMessage = """
                > –í—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –∞–Ω–∫–µ—Ç—É –∏–∑ —Ç—Ä—ë—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.

                > –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –Ω–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è –±–µ—Å–µ–¥—ã.

                > –î–µ–Ω—å –∏ –≤—Ä–µ–º—è, —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∞–º–∏ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ; –µ—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∑–∞—Ä–∞–Ω–µ–µ.

                > –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç, –∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –≤–∞–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.

                ‚û™ –ü—Ä–∏–Ω—è—Ç–æ ü´°""";

        bot.editTextMessageWithButtons(userId, messageId, updatedMessage);

        bot.getUserModes().put(userId, DialogMode.PROFILE);
        bot.getUserQuestionCounts().put(userId, 1);

        UserInfo userInfo = userInfoService.getUserInfoByUserId(userId)
                .orElseGet(() -> createNewUserInfo(userId));

        bot.getUserInfos().put(userId, userInfo);

        bot.sendTextMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.");

        logger.info("Handled accepted callback for userId: " + userId);
    }

    private UserInfo createNewUserInfo(Long userId) {
        UserInfo newUserInfo = new UserInfo();
        newUserInfo.setUserId(userId);
        return newUserInfo;
    }
}
